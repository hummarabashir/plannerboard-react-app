{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","todos","setTodos","_React$useState3","_React$useState4","todo","setTodo","_React$useState5","_React$useState6","todoEditing","setTodoEditing","_React$useState7","_React$useState8","editingText","setEditingText","useEffect","json","localStorage","getItem","loadedTodos","JSON","parse","length","stringify","setItem","removeItem","react_default","a","createElement","Fragment","id","onSubmit","e","preventDefault","Date","newTodo","getTime","text","trim","date","toLocaleDateString","completed","toConsumableArray","concat","alert","type","className","placeholder","onChange","target","value","map","key","checked","updatedTodos","toggleComplete","style","height","width","display","overflow","textDecoration","onClick","objectSpread","submitEdits","handleEditClick","stroke","fill","stroke-width","viewBox","xmlns","d","filter","deleteTodo","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"2MAsKeA,SAnKH,WAAM,IAAAC,EACUC,IAAMC,SAAS,IADzBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACTM,EADSH,EAAA,GACFI,EADEJ,EAAA,GAAAK,EAEQP,IAAMC,SAAS,IAFvBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETE,EAFSD,EAAA,GAEHE,EAFGF,EAAA,GAAAG,EAIsBX,IAAMC,SAAS,MAJrCW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAITE,EAJSD,EAAA,GAIIE,EAJJF,EAAA,GAAAG,EAKsBf,IAAMC,SAAS,IALrCe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKTE,EALSD,EAAA,GAKIE,EALJF,EAAA,GAShBhB,IAAMmB,UAAU,WACd,IAAMC,EAAOC,aAAaC,QAAQ,SAC5BC,EAAcC,KAAKC,MAAML,GAC3BG,GACFjB,EAASiB,IAEV,IA8ED,OATAvB,IAAMmB,UAAU,WACd,GAAId,EAAMqB,OAAS,EAAG,CAClB,IAAMN,EAAOI,KAAKG,UAAUtB,GAC5BgB,aAAaO,QAAQ,QAASR,QAEhCC,aAAaQ,WAAW,UAEzB,CAACxB,IAGFyB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAEEH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aACNJ,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,QAAMG,SA/Ed,SAAsBC,GACpBA,EAAEC,iBACW,IAAIC,KAAjB,IACMC,EAAU,CACdL,IAAI,IAAII,MAAOE,UACfC,KAAMhC,EAAKiC,OACXC,MAAM,IAAIL,MAAOM,qBACjBC,WAAW,GAETN,EAAQE,KAAKf,OAAS,GACtBpB,EAASH,OAAA2C,EAAA,EAAA3C,CAAIE,GAAO0C,OAAOR,IAC3B7B,EAAQ,MAIRsC,MAAM,kDACNtC,EAAQ,OAgEJoB,EAAAC,EAAAC,cAAA,SACEiB,KAAK,OACLC,UAAU,WACVC,YAAY,yBACZC,SAAU,SAAChB,GAAD,OAAO1B,EAAQ0B,EAAEiB,OAAOC,QAClCA,MAAO7C,IAETqB,EAAAC,EAAAC,cAAA,UAAQkB,UAAU,SAASD,KAAK,UAAhC,aAED5C,EAAMqB,OAAS,EACdI,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,aAChB7C,EAAMkD,IAAI,SAAC9C,GAAD,OACTqB,EAAAC,EAAAC,cAAA,OAAKwB,IAAK/C,EAAKyB,GAAIgB,UAAU,QAC3BpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,aACbpB,EAAAC,EAAAC,cAAA,SACEiB,KAAK,WACLf,GAAG,YACHuB,QAAShD,EAAKoC,UACdO,SAAU,kBA1E1B,SAAwBlB,GACtB,IAAIwB,EAAevD,OAAA2C,EAAA,EAAA3C,CAAIE,GAAOkD,IAAI,SAAC9C,GAIjC,OAHIA,EAAKyB,KAAOA,IACdzB,EAAKoC,WAAapC,EAAKoC,WAElBpC,IAETH,EAASoD,GAmEqBC,CAAelD,EAAKyB,OAErCzB,EAAKyB,KAAOrB,EAQXiB,EAAAC,EAAAC,cAAA,YACAkB,UAAU,YACVI,MAAOrC,EACPmC,SAAU,SAAChB,GAAD,OAAOlB,EAAekB,EAAEiB,OAAOC,UAGzCxB,EAAAC,EAAAC,cAAA,OAAK4B,MAAO,CAACC,OAAQ,OACnBC,MAAO,OACPC,QAAS,QACTC,SAAU,SACVC,eAAgBxD,EAAKoC,UAAY,eAAiB,SAAWpC,EAAKgC,OAGxEX,EAAAC,EAAAC,cAAA,KAAGkB,UAAU,UAAUzC,EAAKkC,MAE5Bb,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,gBACZzC,EAAKyB,KAAOrB,EACXiB,EAAAC,EAAAC,cAAA,UAAQkC,QAAS,kBAtFjC,SAAqBhC,GACnB,GAA2B,KAAvBjB,EAAYyB,OAAhB,CAYA,IAAMgB,EAAerD,EAAMkD,IAAI,SAAC9C,GAAD,OAC/BA,EAAKyB,KAAOrB,EAAZV,OAAAgE,EAAA,EAAAhE,CAAA,GAA+BM,EAA/B,CAAqCgC,KAAMxB,IAAgBR,IAQ7DH,EAASoD,GACT5C,EAAe,WArBXkC,MAAM,oDAoF6BoB,CAAY3D,EAAKyB,MAAxC,QAEAJ,EAAAC,EAAAC,cAAA,UAAQkC,QAAS,kBA7FT,SAACzD,GACvBK,EAAeL,EAAKyB,IACpBhB,EAAeT,EAAKgC,MA2FiB4B,CAAgB5D,KAAOqB,EAAAC,EAAAC,cAAA,OAAKsC,OAAO,eAAeC,KAAK,eAAeC,eAAa,IAAIC,QAAQ,YAAYvB,UAAU,+DAA+DW,OAAO,QAAQC,MAAM,QAAQY,MAAM,8BAA6B5C,EAAAC,EAAAC,cAAA,QAAM2C,EAAE,4JAGrR7C,EAAAC,EAAAC,cAAA,UAAQkC,QAAS,kBA/G/B,SAAoBhC,GAClB,IAAIwB,EAAevD,OAAA2C,EAAA,EAAA3C,CAAIE,GAAOuE,OAAO,SAACnE,GAAD,OAAUA,EAAKyB,KAAOA,IAC3D5B,EAASoD,GA6G0BmB,CAAWpE,EAAKyB,MAAKJ,EAAAC,EAAAC,cAAA,OAAKsC,OAAO,eAAeC,KAAK,eAAeC,eAAa,IAAIC,QAAQ,YAAYvB,UAAU,iEAAiEW,OAAO,QAAQC,MAAM,QAAQY,MAAM,8BAA6B5C,EAAAC,EAAAC,cAAA,QAAM2C,EAAE,uNAMvR7C,EAAAC,EAAAC,cAAA,KAAGkB,UAAU,WAAb,kDClJG4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA7C,EAAA,GAAA8C,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhE,EAAAC,EAAAC,cAACF,EAAAC,EAAMgE,WAAP,KACEjE,EAAAC,EAAAC,cAACgE,EAAD,QAOJlB","file":"static/js/main.94b0e7d1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [todos, setTodos] = React.useState([]);\n  const [todo, setTodo] = React.useState(\"\");\n\n  const [todoEditing, setTodoEditing] = React.useState(null);\n  const [editingText, setEditingText] = React.useState(\"\");\n\n\n  \n  React.useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const date = new Date();\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo.trim(),\n      date: new Date().toLocaleDateString(),\n      completed: false,\n    };\n    if (newTodo.text.length > 0 ) {\n        setTodos([...todos].concat(newTodo));\n        setTodo(\"\");\n\n    } else {\n\n        alert(\"No note has been entered! Add note to continue\");\n        setTodo(\"\");\n    }\n  }\n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  }\n\n  function toggleComplete(id) {\n    let updatedTodos = [...todos].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setTodos(updatedTodos);\n  }\n\n  const handleEditClick = (todo) => {\n    setTodoEditing(todo.id);\n    setEditingText(todo.text);\n  };\n\n  function submitEdits(id) {\n    if (editingText.trim() === '') {\n      alert('Note cannot be empty! Enter new note to continue');\n      return;\n    }\n    // const updatedTodos = [...todos].map((todo) => {\n    //   if (todo.id === id) {\n    //     todo.text = editingText;\n    //     }\n    //     return todo;\n    //   });\n    //   setTodos(updatedTodos);\n    //   setTodoEditing(null);\n    const updatedTodos = todos.map((todo) =>\n    todo.id === todoEditing ? { ...todo, text: editingText } : todo\n  );\n  //  const updatedTodos = [...todos].map((todo) => {\n  //     if (todo.id === id) {\n  //       todo.text = editingText;\n  //       }\n  //       return todo;\n  //     });\n  setTodos(updatedTodos);\n  setTodoEditing(null);\n    }\n\n    React.useEffect(() => {\n      if (todos.length > 0) {\n          const json = JSON.stringify(todos);\n          localStorage.setItem(\"todos\", json);\n      } else {\n        localStorage.removeItem(\"todos\");\n      }\n    }, [todos]);\n\n    return (\n      <>\n      {/* <header class=\"appheader\"></header> */}\n        <div id=\"todo-list\">\n          <h1>Planner Dashboard</h1>\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              className=\"addInput\"\n              placeholder=\"Type to add a note ...\"\n              onChange={(e) => setTodo(e.target.value)}\n              value={todo}\n            />\n            <button className=\"submit\" type=\"submit\">Add Note</button>\n          </form>\n          {todos.length > 0 ? (\n            <div className=\"todo-grid\">\n          {todos.map((todo) => (\n            <div key={todo.id} className=\"todo\">\n              <div className=\"todo-text\">\n                <input\n                  type=\"checkbox\"\n                  id=\"completed\"\n                  checked={todo.completed}\n                  onChange={() => toggleComplete(todo.id)}\n                />\n                {todo.id === todoEditing ? (\n                  // <input\n                  //   type=\"text\"\n                  //   className=\"inputText\"\n                  //   required\n                  //   onChange={(e) => setEditingText(e.target.value)}\n                  //   defaultValue={todo.text}\n                  // />\n                  <textarea\n                  className=\"inputText\"\n                  value={editingText}\n                  onChange={(e) => setEditingText(e.target.value)}\n                />\n                ) : (\n                  <div style={{height: '4rem',\n                    width: '100%',\n                    display: 'block',\n                    overflow: 'scroll', \n                    textDecoration: todo.completed ? 'line-through' : 'none' }}>{todo.text}</div>\n                )}\n              </div>\n              <p className=\"smText\">{todo.date}</p>\n\n              <div className=\"todo-actions\">\n                {todo.id === todoEditing ? (\n                  <button onClick={() => submitEdits(todo.id)}>Save</button>\n                ) : (\n                  <button onClick={() => handleEditClick(todo)}><svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" className=\"edit-icon text-green-900 hover:text-green-600 cursor-pointer\" height=\"1.3em\" width=\"1.3em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"></path></svg></button>\n                )}\n\n                <button onClick={() => deleteTodo(todo.id)}><svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" className=\"delete-icon text-green-900 hover:text-green-600 cursor-pointer\" height=\"1.3em\" width=\"1.3em\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\"></path></svg></button>\n              </div>\n            </div>\n          ))}\n          </div>\n          ) : (\n            <p className=\"subtext\">You don't have any tasks yet!!            </p>\n          )}\n        </div>\n        </>\n\n      );\n    };\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}